using System;
using System.Linq;
using System.Windows.Input;
using Ninject;
using AutoMapper;
using GalaSoft.MvvmLight.Command;
using GAP.BL;
using GAP.Helpers;
using GAP.MainUI.ViewModels.Helpers;
using System.Text;

namespace GAP.MainUI.ViewModels.ViewModel
{
    public class DatasetViewModel : DatasetBaseViewModel
    {
        public DatasetViewModel(string token)
            : base(token)
        {
            Initialization();
            CurrentObject = new Dataset();

            Projects = HelperMethods.Instance.ProjectsWithWells();
            if (Projects.Any())
                SelectedProject = Projects.First();

            Title = IoC.Kernel.Get<IResourceHelper>().ReadResource("NewDataset");

            SelectedFamily = Families.First();            
        }

        public DatasetViewModel(string token, Dataset dataset)
            : base(token)
        {
            Initialization();
            OriginalObject = dataset;
            Title = IoC.Kernel.Get<IResourceHelper>().ReadResource("EditDataset");

            Projects = new[] { HelperMethods.Instance.GetProjectByID(dataset.RefProject) };
            if (Projects.Any()) SelectedProject = Projects.First();

            Wells = new[] { HelperMethods.Instance.GetWellByID(dataset.RefWell) };
            if (Wells.Any()) SelectedWell = Wells.First();

            CurrentObject = HelperMethods.GetNewObject<Dataset>(dataset);

            string units = CurrentObject.Units; //upon setting family we'll lose the value of units
            SelectedFamily = Families.SingleOrDefault(u => u.FamilyName == CurrentObject.Family);
            if (SelectedFamily != null) SelectedUnit = units;

            CurrentObject.ObjectChanged += CurrentObject_ObjectChanged;
        }
        private void Initialization()
        {
            Mapper.CreateMap<Dataset, Dataset>();
            SaveButtonText = IoC.Kernel.Get<IResourceHelper>().ReadResource("SaveButton");
        }
        protected override void GetValidName()
        {
            if (OriginalObject != null || SelectedWell == null) return;
            var datasets = HelperMethods.Instance.GetDatasetsByWellID(SelectedWell.ID);
            var lstDatasets = datasets.Where(u => u.Name.StartsWith("Dataset_")).Select(v => v.Name);
            CurrentObject.Name = GlobalDataModel.GetIncrementalEntityName<Dataset>(lstDatasets);
            //CurrentObject.RefProject = SelectedProject.ID;
            //CurrentObject.RefWell = SelectedWell.ID;
        }

        string _saveButtonText;
        public string SaveButtonText
        {
            get { return _saveButtonText; }
            set
            {
                _saveButtonText = value;
                NotifyPropertyChanged("SaveButtonText");
            }
        }

        protected override bool AddObjectValidation()
        {
            var well = HelperMethods.Instance.GetWellByID(CurrentObject.RefWell);
            if (well == null)
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithExclamation(Token,
              "No well assigned to the dataset object");
                return false;
            }
            var datasets = well.Datasets;
            if (datasets == null) return true; //no dataset means nothing to worry about
            if (datasets.Any(u => u.Name == CurrentObject.Name))
            {
                DatasetNameAlreadyInUse();
                return false;
            }
            return true;
        }

        protected override bool CommonValidation()
        {
            if (CurrentObject == null)
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithExclamation(Token,
                    "No dataset object has been generated by this screen");
                return false;
            }
            if (string.IsNullOrWhiteSpace(CurrentObject.Name))
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithExclamation(Token,
                    "Dataset name must be specified");
                return false;
            }
            if (string.IsNullOrWhiteSpace(CurrentObject.Family))
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithExclamation(Token,
                     "A Family must be selected");
                return false;
            }
            if (!Families.Contains(SelectedFamily))
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithExclamation(Token,
                     "Selected Family is not valid");
                return false;
            }
            if (string.IsNullOrWhiteSpace(CurrentObject.Units))
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithExclamation(Token,
                     "A Unit must be selected");
                return false;
            }
            if (!SelectedFamily.Units.Contains(CurrentObject.Units))
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithExclamation(Token,
                                   "Units must belongs to correct Family");
                return false;
            }
            if (CurrentObject.RefProject != SelectedProject.ID)
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithExclamation(Token,
                                    "Invalid project passed in dataset");
                return false;
            }
            if (CurrentObject.RefWell!=SelectedWell.ID)
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithExclamation(Token,
                                    "Invalid well passed in dataset");
                return false;
            }
            var datasetObject = HelperMethods.Instance.GetDatasetByID(CurrentObject.ID);
            if (!VerifyMinMaxValues()) return false;
            if (datasetObject != null)
            {
                //object is being edited
                if (OriginalObject != null && datasetObject.Name == OriginalObject.Name) return true;
                DatasetNameAlreadyInUse();
                return false;
            }
            if (!CurrentObject.IsValidInput(CurrentObject.Name))
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithExclamation(Token, string.Format("No special characters allowed. {0} is not a valid input", CurrentObject.Name));
                return false;
            }
            return true;
        }

        protected override bool UpdateObjectValidation() { return true; }
        protected override bool CanSave()
        {
            return CurrentObject != null && IsObjectValid() && (IsDirty || OriginalObject == null);
        }
        private bool IsObjectValid()
        {
            if (string.IsNullOrWhiteSpace(CurrentObject.Name)) return false;
            if (string.IsNullOrWhiteSpace(CurrentObject.RefWell)) return false;
            if (string.IsNullOrWhiteSpace(CurrentObject.RefProject)) return false;
            return true;
        }
        ICommand _saveDatasetCommand;
        public ICommand SaveDatasetCommand
        {
            get { return _saveDatasetCommand ?? (_saveDatasetCommand = new RelayCommand(SaveDataset, CanSave)); }
        }

        private bool VerifyMinMaxValues()
        {
            double minValueXAxis, maxValueXAxis;
            decimal minUnitValue;

            if (CurrentObject.MinUnitValue >= (decimal)-999.999 && CurrentObject.MinUnitValue <= -999)
                minUnitValue = CurrentObject.DepthAndCurves.Except(CurrentObject.DepthAndCurves.Where(u => u.Curve >= ((decimal)-999.99) && u.Curve <= -999)).Min(u => u.Curve);
            else
                minUnitValue = CurrentObject.MinUnitValue;
            minValueXAxis = double.Parse(minUnitValue.ToString());
            maxValueXAxis = Convert.ToDouble(CurrentObject.MaxUnitValue);
            if (maxValueXAxis < minValueXAxis)
            {
                IoC.Kernel.Get<ISendMessage>().MessageBoxWithError(Token, "Max value should be greater than ACTUAL min value(non null)" +
                    Environment.NewLine + "Max Value is " + maxValueXAxis + " and Min Value is " + minValueXAxis +
                    Environment.NewLine + "Process is now being terminated");
                return false;
            }
            return true;
        }

        public void SaveDataset()
        {
            if (!CommonValidation()) return;
            if (!ValidateCurrentObject()) return;
            if (OriginalObject != null)//dataset is being updated
            {
                if (!UpdateObjectValidation()) return;

                Mapper.Map(CurrentObject, OriginalObject);
                UndoRedoObject.GlobalUndoStack.Push(new UndoRedoData
                {
                    ActionType = ActionPerformed.ItemUpdated,
                    ActualObject = CurrentObject,
                    EffectedType = UndoRedoType.Dataset
                });

                //if this dataset is part of the curve which is being used in the selected dataset then update the charts
                var curves = IoC.Kernel.Get<IGlobalDataModel>().MainViewModel.SelectedChart.Tracks.SelectMany(u => u.TrackObject.Curves);
                curves = curves.Where(u => u.RefDataset == CurrentObject.ID && u.RefProject == CurrentObject.RefProject && u.RefWell == CurrentObject.RefWell);
                //these are the curves which belongs to this dataset and has something in the seleccted chart
                if (curves.Any())
                {
                    foreach (Curve curve in curves.ToList())
                    {
                        var curveToShow = GlobalDataModel.GetCurveToShowByCurve(curve);
                        if (curveToShow != null)
                        {
                            GlobalDataModel.Instance.AddDataseriesInformationToCurve(CurrentObject, curveToShow);
                            GlobalDataModel.Instance.StylingOfScaleControl(CurrentObject, curveToShow);
                        }
                    }
                }

                GlobalDataModel.Instance.SendMessage(Token, NotificationMessageEnum.CloseWithGlobalDataSave);
            }
            else
            {
                if (!AddObjectValidation()) return;
                GlobalDataModel.Instance.SendMessage(Token, NotificationMessageEnum.SaveDataset);
            }

        }
    }//end class
}//end namespace
